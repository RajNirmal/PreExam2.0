package com.spintum.preexam;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.StrictMode;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.GradientDrawable;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.MarginLayoutParams;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.Spinner;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;


public class Analytics extends Activity {
	int w, h, dpi, layoutHeight, noOfValues;
	LinearLayout last, header, chart, desc,total;
	TextView percent1, percent2, percent3, tot,takenow;
	RelativeLayout layout;
	int[] manhattan, values;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_analytics);

		StrictMode.ThreadPolicy pol = new StrictMode.ThreadPolicy.Builder()
				.permitAll().build();
		StrictMode.setThreadPolicy(pol);
		this.getActionBar().setBackgroundDrawable(
                getResources().getDrawable(R.color.background));
		this.overridePendingTransition(R.layout.fade_in, R.layout.fade_out);
		DisplayMetrics displaymetrics = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		h = displaymetrics.heightPixels;
		w = displaymetrics.widthPixels;
		noOfValues = w / 130;
		layoutHeight = (int) ((float) h * 0.30);
		DisplayMetrics metrics = getResources().getDisplayMetrics();
		dpi = (int) (metrics.density * 160f);
		total=(LinearLayout)findViewById(R.id.totalScore);
		last = (LinearLayout) findViewById(R.id.lastScore);
		header = (LinearLayout) findViewById(R.id.header);
		layout = (RelativeLayout) findViewById(R.id.layout);
		chart = (LinearLayout) findViewById(R.id.chart);
		desc = (LinearLayout) findViewById(R.id.desc);
		percent1 = (TextView) findViewById(R.id.perc1);
		percent2 = (TextView) findViewById(R.id.perc2);
		percent3 = (TextView) findViewById(R.id.perc3);
        takenow = (TextView) findViewById(R.id.takenow);
        takenow.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                changeActivity();
            }
        });
		data();
	}
    void changeActivity(){
        Intent intent=new Intent(Analytics.this,PreQuiz.class);
        startActivity(intent);
    }

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_current_syllabus, menu);
		return true;
	}

	public void data() {
		SharedPreferences sp=this.getSharedPreferences("UserScore", 0);
		String sc = sp.getString("score", "");
		String pt = sp.getString("percent", "");
		String[] scores = sc.split(",");
		String[] percent = pt.split(",");
		if((!sc.equals(""))){
			float[] per = new float[500];
			if (percent.length >= 0) {
				//tot.setText("" + scores.length);
                String length;Integer totalattempts;
                totalattempts= scores.length;
                length=totalattempts.toString()+" ";
                total.setLayoutParams(new LinearLayout.LayoutParams(w / 4, h / 7));
                total.addView(new PercentCircle(getApplicationContext(), 0, length), 0);
				for (int k = 0; k < percent.length; k++) {
					per[k] = Float.parseFloat(percent[k]);
					percent1.setText(String.format("%.2f", per[2]) + "%");
					percent2.setText(String.format("%.2f", per[1]) + "%");
					percent3.setText(String.format("%.2f", per[0]) + "%");
				}
			}

			int[] values = new int[500];
			if (values.length > 0) {
				for (int i = 0; i < scores.length; i++) {
					values[i] = 0;
				}
				for (int i = 0; i < scores.length; i++) {
					values[i + 1] = Integer.parseInt(scores[i]);
				}
				int[] lscore = new int[10];
				lscore[0] = Integer.parseInt(scores[0]);
				last.removeAllViews();
				last.setLayoutParams(new LinearLayout.LayoutParams(w / 4, h / 7));
				last.addView(new PercentCircle(getApplicationContext(), lscore[0] * 5, scores[0] + " "), 0);
				header.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, h / 5));
				LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(w,(int) ((float) h * 0.30));
				p.setMargins(20, 30, 20, 0);
				p.gravity = Gravity.CENTER_HORIZONTAL;
				layout.setGravity(Gravity.CENTER_HORIZONTAL);
				layout.setLayoutParams(p);
				layout.setBackgroundColor(0xffd0d0d0);
				manhattan = new int[noOfValues * 2];
				prepareChart(values);
				chart.animate().rotation(180);
				chart.animate().translationX(100);
				View chart = new chart(getApplicationContext(), manhattan);
				chart.animate().rotation(180);
				// chart.animate().translationX(30);
				layout.addView(chart);
			}
		}
		else {
		tot.setText("0");
		percent1.setText("0%");
		percent2.setText("0%");
		percent3.setText("0%");
		int[] values = new int[20];
		for (int i = 0; i < 10; i++) {
			values[i] = 0;
		}
		last.removeAllViews();
		last.setLayoutParams(new LinearLayout.LayoutParams(w / 4, h / 7));
		last.addView(new PercentCircle(getApplicationContext(), 0, "0" + ""), 0);
		header.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, h / 5));
		LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(w,(int) ((float) h * 0.30));
		p.setMargins(20, 30, 20, 0);
		p.gravity = Gravity.CENTER_HORIZONTAL;
		layout.setGravity(Gravity.CENTER_HORIZONTAL);
		layout.setLayoutParams(p);
		layout.setBackgroundColor(0xffd0d0d0);
		manhattan = new int[noOfValues * 2];
		prepareChart(values);
		chart.animate().rotation(180);
		chart.animate().translationX(100);
		View chart = new chart(getApplicationContext(), manhattan);
		chart.animate().rotation(180);
		// chart.animate().translationX(30);
		layout.addView(chart);
	}
}
	public class PercentCircle extends TextView {

		Paint mPaint = new Paint();
		int percent;
		String text;

		public PercentCircle(Context context, int percent, String text) {
			super(context);
			this.percent = percent;
			this.text = text;
		}

		@Override
		public void onDraw(Canvas canvas) {

			Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG
					| Paint.DITHER_FLAG | Paint.ANTI_ALIAS_FLAG);
			mPaint.setDither(true);
			mPaint.setColor(Color.parseColor("#1a237e"));
			mPaint.setStyle(Paint.Style.STROKE);
			mPaint.setStrokeWidth(15);
			// setBackgroundColor(0xff000000);

			int sizeX = getWidth() / 2, sizeY = getHeight() / 2;
			int radius = h / 20;
			int deltaX = sizeX - radius;
			int deltaY = sizeY - radius;
			int arcSizeX = (sizeX - (deltaX / 2)) * 2;
			int arcSizeY = (sizeY - (deltaY / 2)) * 2;
			// Thin circle
			canvas.drawCircle(canvas.getWidth() / 2, canvas.getHeight() / 2,
					radius, mPaint);
			// Arc
			mPaint.setColor(Color.parseColor("#ffffff"));
			mPaint.setStrokeWidth(15);
			RectF box = new RectF(deltaX, deltaY, arcSizeX, arcSizeY);
			float sweep = 360 * percent * 0.01f;
			canvas.drawArc(box, 0, sweep, false, mPaint);

			mPaint.setTextSize(h / 18);
			mPaint.setColor(0xffffffff);
			mPaint.setStyle(Paint.Style.FILL);
			mPaint.setStrokeWidth(10);
			mPaint.setTextAlign(Paint.Align.RIGHT);
			mPaint.setAntiAlias(true);
			canvas.drawText(text + "", sizeX + (int) ((float) radius * 0.60),
					sizeY + (int) ((float) radius * 0.45), mPaint);
		}

		protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
			setMeasuredDimension(
					getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),
					getDefaultSize(getSuggestedMinimumHeight(),
							heightMeasureSpec));
		}

		protected void onLayout(boolean changed, int left, int top, int right,
								int bottom) {
			MarginLayoutParams margins = MarginLayoutParams.class
					.cast(getLayoutParams());
			margins.topMargin = -45;
			margins.bottomMargin = -45;
			margins.leftMargin = -45;
			margins.rightMargin = -45;
			setLayoutParams(margins);
		};
	}
	public class chart extends View {
		int[] points;

		public chart(Context c, int[] p) {
			super(c);
			points = p;
			setHorizontalScrollBarEnabled(true);
		}

		@Override
		protected void onDraw(Canvas canvas) {
			super.onDraw(canvas);
			Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
			paint.setColor(0xff3f51b5);
			paint.setStrokeWidth(10f);
			paint.setStyle(Paint.Style.STROKE);
			for (int i = 2; i < points.length - 5; i = i + 2) {
				canvas.drawLine(points[i], points[i + 1], points[i + 2],
						points[i + 3], paint);
			}
		}
	}

	public void prepareChart(int[] values) {
		int max = getMax(values);
		int manPointer = noOfValues * 2 - 1;
		int currentX = 70;
		max += 10;
		int descPointer = noOfValues - 1;

		for (int i = 0; i < noOfValues; i++) {
			double percent = (double) values[i] / (double) max;
			double viewHeight = (double) layoutHeight * percent;
			TextView bar = new TextView(getApplicationContext());
			LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(50,
					(int) viewHeight);
		if(i==5) {
				p.setMargins(90, 0, 80, 0);
			}else if(i==3) {
				p.setMargins(90, 0, 100, 0);
			}else if (i==1)
				p.setMargins(290, 0, 80, 0);

			bar.setLayoutParams(p);
			bar.setBackgroundColor(0xffffffff);
			if(i!=0 && i!=noOfValues-1)
				chart.addView(bar);

			manhattan[manPointer - 1] = currentX;
			currentX += 140;
			manhattan[manPointer] = (int) viewHeight;
			manPointer -= 2;

			TextView tmp = new TextView(getApplicationContext());
			tmp.setText(values[descPointer]+"");
			tmp.setTextSize(w/75);
			if (w > 900){
				tmp.setTextSize(w / 75);
			}
			else {
				if(dpi>160) {
					tmp.setTextSize((int) ((float) w * 0.02));
				}else {
					tmp.setTextSize((int) ((float) w * 0.04));
				}
			}
			if(descPointer==6) {
				tmp.setPadding(105, 0, 0, 0);
			}else {
				tmp.setPadding(120, 0, 0, 0);
			}
			tmp.setTextColor(0xffffffff);
			if(descPointer != noOfValues-1 && descPointer !=0)
				desc.addView(tmp);
			desc.setLayoutParams(new LinearLayout.LayoutParams(
					LayoutParams.MATCH_PARENT, (int) ((float) h * 0.04)));
			descPointer--;
		}
	}
	public int getMax(int[] arr) {
		int max = 0;
		for (int a : arr) {
			if (a > max)
				max = a;
		}
		return max;
	}

}
